services:
  db:
    image: postgres:15
    stop_grace_period: 0s
    environment:
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      PGUSER: ${DB_USER:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 5s
      retries: 10
    volumes:
      - prodDB:/var/lib/postgresql/data

  backend:
    environment:
      DB_HOST: db
      DB_PASS: ${DB_PASS:-postgres}
      DB_USER: ${DB_USER:-postgres}
      SECRET_KEY: ${SECRET_KEY:-changeme}
      NODE_ENV: production
      SITE_URL: ${SITE_URL:-https://www.caudrel.com}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-changeme}
      NEXT_PUBLIC_APOLLO_URI: ${NEXT_PUBLIC_APOLLO_URI:-https://www.caudrel.com/graphql}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      REDIS_PORT: 6379
    stop_grace_period: 0s
    depends_on:
      db:
        condition: service_healthy
    image: caudrel/portfolio-server

  frontend:
    environment:
      SECRET_KEY: ${SECRET_KEY:-changeme}
    stop_grace_period: 0s
    image: caudrel/portfolio-client

  redis:
    image: redis:alpine
    ports:
      - 6379:6379
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
    command: sh -c "redis-server --requirepass \"$${REDIS_PASSWORD}\""
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3

  gateway:
    stop_grace_period: 0s
    restart: always
    build:
      context: gateway
      dockerfile: Dockerfile.production
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - ${GATEWAY_PORT-80}:80

volumes:
  prodDB:
