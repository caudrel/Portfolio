services:
  db:
    image: postgres:15
    stop_grace_period: 0s
    environment:
      POSTGRES_PASSWORD: ${DB_PASS-postgres}
      PGUSER: ${DB_USER-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 5s
      retries: 10
    volumes:
      - prodDB:/var/lib/postgresql/data

  backend:
    environment:
      DB_HOST: db
      DB_PASS: ${DB_PASS-postgres}
      DB_USER: ${DB_USER-postgres}
      SECRET_KEY: ${SECRET_KEY:-changeme}
      NODE_ENV: ${NODE_ENV:-production}
      SMTP_HOST: ${SMTP_HOST:-production}
      SMTP_PORT: ${SMTP_PORT:-production}
      SMTP_USER: ${SMTP_USER:-production}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-production}
      SITE_URL: ${SITE_URL:-production}
      EMAIL_FROM: lozachaurelie@gmail.com
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-changeme}
    stop_grace_period: 0s
    depends_on:
      db:
        condition: service_healthy
    # build:
    #   context: backend
    #   dockerfile: Dockerfile.production
    image: caudrel/portfolio-server

  frontend:
    environment:
      SECRET_KEY: ${SECRET_KEY:-changeme}
    stop_grace_period: 0s
    # build:
    #   context: frontend
    #   dockerfile: Dockerfile.production
    image: caudrel/portfolio-client

  gateway:
    stop_grace_period: 0s
    restart: always
    build:
      context: gateway
      dockerfile: Dockerfile.production
    ports:
      - ${GATEWAY_PORT-80}:80

volumes:
  prodDB:
