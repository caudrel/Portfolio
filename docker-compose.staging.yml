services:
  db:
    image: postgres:15
    stop_grace_period: 0s
    environment:
      POSTGRES_PASSWORD: ${DB_PASS-postgres}
      PGUSER: ${DB_USER-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p ${DB_PORT} -U ${DB_USER-postgres}"]
      interval: 2s
      timeout: 5s
      retries: 10
    volumes:
      - stagingDB:/var/lib/postgresql/data

  backend:
    environment:
      DB_HOST: db
      DB_PASS: ${DB_PASS-postgres}
      DB_USER: ${DB_USER-postgres}
      SECRET_KEY: ${SECRET_KEY:-changeme}
      NODE_ENV: production
      SITE_URL: ${SITE_URL:-staging}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-changeme}
      NEXT_PUBLIC_APOLLO_URI: ${NEXT_PUBLIC_APOLLO_URI:-changeme}
    stop_grace_period: 30s
    depends_on:
      db:
        condition: service_healthy
    image: caudrel/portfolio-server
    container_name: portfolio-server-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
    ports:
      - "${BACKEND_PORT}:4001"

  frontend:
    environment:
      SECRET_KEY: ${SECRET_KEY:-changeme}
      FRONTEND_PORT: ${FRONTEND_PORT}
    stop_grace_period: 0s
    image: caudrel/portfolio-client
    container_name: portfolio-client-staging
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:${FRONTEND_PORT} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "${FRONTEND_PORT}:3001"

  gateway:
    stop_grace_period: 0s
    restart: always
    build:
      context: ./gateway
      dockerfile: Dockerfile.production

volumes:
  stagingDB:
